<!--  hidden by JS -->
<!--  .js-test-hidden -->
<div class="js-test-hidden">
  <h1>YOU DON"T HAVE JAVASCRIPT, WHICH IS REQUIRED FOR FUNCTIONAL LINKS & CONTENT REORDERING</h1>
</div>

<!--  .header -->
<div class="header">

  <!--  .intro -->
  <section class="intro">
    <b> Max Pleaner </b> <br>
    <i> <small>Web Developer / Software Engineer </small></i>
  </section>
  <hr>

  <!--  .primary-links  -->
  <!--  .clickable -->
  <!--  data-target -->
  <section class="primary-links">
    <a class="clickable" data-target="skills" href="#skills">Skills</a>
    <a class="clickable" data-target="experience" href="#experience">Experience</a>
    <a class="clickable" data-target="links" href="#links">Links</a>
  </section>
</div>

<!--  .focus-area-1 -->
<!--  .focus-area-2 -->
<section class="focus-area-1"></section><br>
<section class="focus-area-2"></section>

<!--  .skills -->
<!--  .clickable -->
<!--  data-target -->
<section class="skills" id="skills">
  <p><b>Skills</b></p> <br>
  <a class="clickable" data-target="ruby" href="#skills/ruby">Ruby</a>
  <a class="clickable" data-target="javascript" href="#skills/javascript">Javascript</a>
  <a class="clickable" data-target="css" href="#skills/css">HTML/ CSS</a>
  <a class="clickable" data-target="databases" href="#skills/databases">Databases</a>
  <a class="clickable" data-target="deployment" href="#skills/deployment">Deployment</a>
  <a class="clickable" data-target="testing" href="#skills/testing">Testing</a>
  <a class="clickable" data-target="linux" href="#skills/linux">Linux</a>
  <a class="clickable" data-target="iot" href="#skills/iot">Internet of Things</a>
  <a class="clickable" data-target="world" href="#skills/world">The World at Large</a>
</section>

<!--  .skill-details -->
<section class="skill-details">
  <section class="ruby" id="ruby">
    <p><b>Ruby</b></p> <br>
    <p>
      <pre>
        Ruby was the language with which I learned many programming basics
        and I've been learning and using it since.

        I recall when I was just starting out programming when I read that the Ruby
        community was the type to give a lot of hugs. I think this is a little far fetched,
        but does illustrate some characteristics of the language. The coziness of hugs
        reflects the smaller size of Ruby's developer community, not just in
        comparison to C and Java but also Python, the latter of which Ruby shares a
        very similar syntax with.

        The friendiness of hugs reflects the readability of Ruby. I haven't learned
        Java or C, but I haven't seen any such code that maintains a poetic natural
        language sensibility in the way Ruby does. Some insist that this comes at a
        price. For example, Ruby's "<a href="http://en.wikipedia.org/wiki/Duck_typing
">duck-typing</a>" system can be seen as allowing
        errors to propagate unnecessarily farther than their origins. It allows
        for a lot less redundancy, though, if the reader/author can keep track of
        variable types. I've found Ruby's stack traces to be quite comprehendable,
        though.

        <a href="https://news.ycombinator.com/item?id=682101">Here</a> is an interesting thread about Python vs Ruby. There's a lot
        of bickering about minute syntax details, but I think there's a salient
        differentiation described between Python's "conservative" nature and Ruby's
        "experimental" one. I think this partly reflects Python's age and history
        of integration with enterprise / non-web application in comparison to Ruby's
        more particular association with the web, since Ruby became popular with Rails.
        I've began learing Python, but for what I'm mainly using Ruby for, web apps,
        I'm generally finding myself using my time to learn Node / Javascript instead.
        The "cutting edge" sentiment aside, single-page-app features have become an
        expected convenience for users.

        <i><b>A list of some tools I use when writing Ruby:</b></i>

        <b><a href="http://rubyonrails.org/">Rails</a></b>

          Rails is the web framework I'm quickest and most fluent in.
          I don't think Rails is the end-all for web development. With more fluency, I'm sure I could
          write a complex single-page app faster with a Node framework. For mostly everything besides
          asynchronous server calls and client-side page navigation, though, I'm quickest with Rails.

          A few topics of Rails development worth highlighting:

            <b> Auth </b>- Session tokens, authenticity tokens, and encrypted passwords can be be added
              to Rails rather quickly - One App Academy assessment was to set the system up within 15
              mininutes. There are also gems like <a href="https://github.com/plataformatec/devise">Devise</a> which add this functionality,
              and OAuth libraries for many providers. I'm also interested
              to try the more minimalist <a href="https://github.com/NoamB/sorcery">Sorcery</a> Auth library. There can be a
              lot that goes into a complex auth system - email confirmation, password retrieval,
              etc. Gems like Devise help with this.

            <b> Code Organization</b> -  At first, the default Rails project directory structure struck
              me as somewhat daunting, especially for sections relating to features I wasn't sure I'd use.
              I still have this sense a little, but I've come to appreciate the 'convention
              over configuration' approach and it does create a good level of portability for
              moving components between projects.

            <b> Generators</b> - <code> rails new </code> is a generator for a new
              project. For some projects (like this site, which is mainly HTML, CSS and JS),
              this is nearly all the code the server needs in development mode. There
              are also generators for models, controllers, database migrations,
              <a href="http://en.wikipedia.org/wiki/Rake_%28software%29">rake tasks</a>, and, my favorite, <code>scaffold</code>s, which produces a working
              <a href="http://en.wikipedia.org/wiki/Create,_read,_update_and_delete">CRUD</a> app with front-end. Generators excite me not just because of laziness
              but also because of their potential to facilitate metaprogramming. There's
              even a project called <a href="http://prelang.com/">Prelang</a> which lets you describe your app's specs in a
              web interface and generates a rails project for you. <a href="http://www.meteorkitchen.com/">Meteor Kitchen</a> is a
              similar tool for Javascript.

        <a href="http://www.sinatrarb.com/">Sinatra</a>

          Sinatra shares a lot in common with Rails but is much more minimalist. Learning
          Sinatra taught me that Rails is not the only smart choice for web development
          in Ruby. It's less 'opinionated' than Rails, and since projects are built more
          from-the-ground-up, there's less deconstruction required to change out core
          components. It was in this context that I found <a href="http://datamapper.org/">DataMapper</a>, a plug-n-play,
          migration-less alternative to Rails' <a href="http://guides.rubyonrails.org/active_record_basics.html">ActiveRecord</a> database library. I usally
          choose Rails for new projects, but learning Sinatra has inspired me to take
          occasional forays into building minimalist Ruby web frameworks and
          helped me appreciate the modular aspects of well-constructed Ruby gems.
          Sinatra's routing pattern, <code>get ("/") { puts "hello world" }</code>, is found
          in lots of Ruby's web "microframeworks".

        <a href="http://www.gembundle.com/">Gems</a>

          Gems are Ruby's plugin system, managed with <a href="https://rvm.io/">RVM</a> (or <a href="https://github.com/sstephenson/rbenv">rbenv</a>), <a href="https://rubygems.org/">RubyGems</a>, <a href="http://bundler.io/">Bundler</a>, etc.
          Interesting gems are constantly coming out. The site <a href="http://gembundle.com">GemBundle</a> is useful for
          discovering them.

          Here are a few I like:
        <span><span>
            <a href="https://github.com/defunkt/colored">Colored</a>
              This Gem enables string methods like <code>"string".red</code>, <code>"string".bold.underline</code>,
              <code>"string".white_on_red</code>, etc. It uses <a href="http://en.wikipedia.org/wiki/ANSI_escape_code">ANSI Codes</a> so the text appears
              colored when it's printed in the terminal. The actual text saved to file, though, is wrapped in
              escape codes (i.e. <code>"string".red</code> would produce <code>\e[31mstring\e[0m</code>). I use this mostly any time
              I make CLI applications. There's also a Javascript library called <a href="https://github.com/drudru/ansi_up">Ansi Up</a>
              which converts ANSI-encoded text into <code>span</code> elements with
              corresponding CSS coloring. Together they make an easy way to define
              styles from the server.
              
              Examples:
                <span class="ansi"><%= ".red_on_yellow".red_on_yellow %></span>
                <span class="ansi"><%= ".green_on_black".green_on_black %></span>
          </span><span>
            <a href="https://github.com/deivid-rodriguez/byebug">Byebug</a>
              This makes it possible to place breakpoints in code and step through, inspecting values and running
              code in a REPL. It is similar to the "<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/debugger">debugger</a>" breakpoint tool for Javascript in major browsers.
              There are also powerful features I haven't used, such as changing source code on-the-fly.
              It's vast improvement to debugging with "puts" statements.
          </span><span>
            <a href="https://github.com/rails/rails/tree/master/activesupport">ActiveSupport</a>
              This gem is built into Rails, but I frequently use it in non-Rails projects
              with <code>require 'active_support/all'</code> so that I can use string methods like
              <code>capitalize</code>, <code>pluralize</code>, <code>singularize</code>, and <code>constantize</code>.
              
              For example:
              <code>
  class Light
    def on
      puts "light is on"
    end
  end
  "lights".singularize.capitalize.constantize.new.on
  # => "light is on"
            </code>

              It might seem pointless to do this instead of <code>Light.new.on</code>,
              but there are other use-cases for these methods. Methods can be activated from
              symbols (via <code>send</code>), and any string can be converted to symbol
              (<code>:"Some #{'long_string'} Symbol"</code> is still a symbol, in fact).
              Strings can also be passed to get and set instance variables, like
              <code>User.new.send("@#{'name'}=", "Max")</code> (which will set the User's
              'name' instance variable to Max. Such tools might seem flashy instead of useful,
              but the Ruby language favors the <a href="http://en.wikipedia.org/wiki/There%27s_more_than_one_way_to_do_it">tmtowtdi</a> approach (there's more than one way
              to do it), and despite their cryptic looking syntax, metaprogramming methods can
              help write <a href="http://en.wikipedia.org/wiki/Domain-specific_language">Domain Specific Langauges</a> which are even more
              readable than regular Ruby code.
          </span><span>
            <a href="http://opalrb.org/">Opal</a>
              I haven't actually used this much, but I think it's very interesting.
              Opal compiles Ruby to Javascript and can even compile to Javascript
              libraries like jQuery. <a href="http://voltframework.com/">Volt</a> is a framework built with Opal that
              features <a href="http://stackoverflow.com/questions/13504906/what-is-two-way-binding">2-way-data binding</a> and that I'm eager to look into more.
          </span><span>
            <a href="https://github.com/rest-client/rest-client">Rest Client</a>
            HTTP requests and responses carry the data which is interpreted
            by browsers to interpret websites' code on users' (clients')
            computers. Users normally have no reason to compose HTTP requests, but
            developers often do as a means of communicating with the
            web without a browser. RestClient helps configure HTTP
            Methods (and <a href="http://en.wikipedia.org/wiki/Representational_state_transfer">REST</a>), parameters, headers, etc.
            A basic example is <code>RestClient.get("http://wikipedia.com")</code>, which will give a text version
            of the file a browser would receive if the url were entered in the address bar.
              I'm not sure a Gem is really necessary for this functionality, since Ruby's
              standard library has <code>open-uri</code> which I'm pretty sure I could have used anywhere
              I used RestClient (the same goes for <a href="https://github.com/jnunemaker/httparty">HTTParty</a>).
              Most of the time I have used this in conjunction with Nokogiri, but it's itself useful as
              an alternative to Curl.
          </span> <span>
            <a href="https://github.com/nokogiri/nokogiri">Nokigiri</a>
              Basically jQuery for the Ruby server
              The <code>Nokigiri.parse(html).css</code> method allows for selecting objects from
              the DOM like <code>$('.some-css-class')</code> does. It's useful for web scraping.
          </span>
        </span>
      </pre>
    </p>
  </section>

  <section class="javascript" id="javascript">
    <p><b>Javascript</b></p> <br><pre>
        I've been learning & working with Javascript since soon after I began programming.
        Javascript offers some benefits and drawbacks in comparison to Ruby.

        First, one drawback - the language is is some ways a bit more primitive than Ruby. Alot
        of convenience methods in Ruby (<code>map</code> and <code>reject</code> for example)
        aren't defined in plain JS. They are defined in libraries like <a href="#underscore-url">underscore</a>, though.

        Next, a benefit - Javascript has a better system for passing around functions
        as arguments ("callbacks"). In Ruby, there are special types / keywords for this -
        <code>yield</code>, <code>Proc</code>, <code>Lambda</code>, etc. In Javascript, though, what's passed around is identical to a
        normal method. Another benefit of Javascript is the open access to define attributes on
        arbitrary objects. It's be like if Objects in Ruby were by default <code>OpenStruct</code>
        objects.

        Also, a less nuanced benefit is clearly the access JS has to the DOM. This
        is ubiquitous to Javascript, and a conventional complex web app will certainly
        use Javascript for the front-end.

        Some topics in Javascript that I have experience with -

        <b> jQuery - </b>
          A very useful abstraction for DOM methods. As I understand it, anything
          in jQuery can be written with plain Javascript without <i> too </i> much
          more effort (some are adament that jQuery should be avoided) - see
          <a href="http://youmightnotneedjquery.com">here</a> for jQuery / Javascript equivalents, but I (and many others) find it a
          valuable time-saver. <a href="http://blog.jquery.com/2014/01/13/the-state-of-jquery-2014">jQuery's blog</a> reports that it's used by 60% of
          the top 100,000 websites.

          Some features I find particularly useful:

              <code>$.AJAX</code> (or <code>$.get</code>, <code>$.post</code>, etc.)
              For making AJAX to the server.

              <code>$.('.css-selector')</code>
              One can select using class, ID or attribute, replacing Javascript's
              <code>document.getElementByID</code>, <code>document.getElementsByClassName</code> or <code>document.querySelector</code>.

              <code>$(".some-element").on("some-event", function(event) { ... event code ... })</code>
              Event handlers. For <code>click</code>, <code>hover</code>, <code>submit</code>,
              window scrolling, etc.

              <code>$(".some-element").hide().show().fadeOut().fadeIn()</code>
              CSS effects & transitions.
              
              <code>clone()</code>, <code>remove()</code>, and <code>empty()</code>
              are among the many other useful methods.
          
        <b>
          <a href="#coffeescript-url">Coffeescript</a>
        </b>
        <b>
          <a href="#backbone-url">Backbone</a>
        </b>
        <b>
          <a href="#meteor-url">Meteor</a>
        </b>
        <b>
          <a href="#underscore-url">Underscore</a>
        </b>
        <b>
          <a href="#npm">NPM</a>
        </b>
        <b>
          <a href="#">###</a>
        </b>
      </pre>

  </section>

  <section class="css" id="css">
    <p><b>HTML / CSS</b></p><pre>
          HTML is the "skeleton" of a page. It contains unstyled content. Sometimes,
          with a bad internet connection, pages will fail to load CSS and users see the
          page's content, but everything is quite ugly. Content is usually stacked to
          the left side of the screen, the background is white and text is black.This
          is the HTML by itself.

          Websites are generally constructed with a HTML skeleton, CSS styles,
          and more complex interactivity in Javascript.

          HTML offers a lot for website building without CSS and Javascript, though.
          There are preset styles for many elements. Furthermore, effective CSS relies
          on a confident understanding of the default style effects of HTML elements.
          For example, the <code>pre</code> tag signifies "preformatted" text - text in this
          tag will have newlines and indentation preserved. Other tags, like <code>p</code> (paragraph),
          don't respect newlines and indentation. There are many more examples,
          such as <code>b</code> (bold), <code>i</code> (italic), the distinction between <code>block</code>
          and <code>inline</code> display types, <code>font-size</code>, and many more.

          There are a lot of nuances to good HTML code, and I tend to use libraries for
          these effects. As with Javascript and CSS, a big issue is compatibility between
          browsers. A "Shim" (particular command that, when commented out, is still
          interpreted by older browsers) can be used for "<a href="#progressive-enhancement-url">progressive enhancement</a>"
          (or "<a href="#graceful-degredation-url">graceful degredation</a>", if the glass is half empty).
          There is also the issue of viewport resizing, key to "responsive" websites
          which change the content's presentation depending on which size screen the
          user's computer has. All non-inline CSS and Javascript is ultimately included through
          the HTML document through requiring the files in <code>script</code> and <code>link</code> tags.
          I know <a href="#polymer-url">Polymer</a> is a project to assist in making
          custom HTML elements, and HTML is a very complex area I could learn more
          about.

          CSS isn't responsible for all "style" on the web - Javascript is capable of making
          very complex visual effects (<a href="#d3-url">D3</a>, <a href="#canvas-url">Canvas</a>, etc.)

          Here is a good tutorial for learning CSS: <a href="#css-food-tutorial-url">Good CSS Tutorial</a>.

          CSS color names are useful, but also mildly entertaining: <a href="#css-color-names-url">CSS Color Names</a>.

          There are many libraries and programs which help write HTML and CSS.
          For CSS, there are preprocessors like <a href="#sass-url">Sass</a> and <a href="#less-url">Less</a>.
          I haven't looked much at Less, and I haven't found SASS to offer a substantial benefit over CSS,
          I understand that features such as nested styles and mixins are useful, but my troubles with
          CSS are generally the result of misunderstanding the effects of style rules, not with
          writing code that is too verbose.

          I find that with using CSS libraries found on the internet, it's often hard to refactor
          or experiment with new features. This is why, for personal projects, I tend
          not to use CSS libraries / components (such as <a href="#bootstrap-url">Bootstrap</a>). I understand the
          need to make sites look good, though. It's easy to buy incredible CSS
          templates through sites like <a href="http://themeforest.net">ThemeForest</a>.

          There's also many Javascript / jQuery plugins which work in conjunction with
          HTML and CSS. I look at <a href="#unheap-url">Unheap</a> for these,
          but also anywhere people are discussing new open-source projects.

          <a href="#bootstrap-zero">Bootstrap-Zero</a> is a particularly good source
          for free Bootstrap templates, in my opinion. The <a href="#bootstrap-zero-google-cards-url">Google Cards</a>
          template is particularly impressive.

          I am interested in moving more of my HTML / CSS (and JS) workflow to
          WYSIWYG editors. There are companies which make excellent products for this.
          One I've used is <a href="#weebly-url">Weebly</a>, which has a great
          drag-and-drop editor for components. I'm not sure if apps like Dreamweaver
          provide HTML / CSS export, but I'd definitely like to look more into tools that do.

          There are certain CSS features I find offer a lot of bang for the buck:

          <code>transitions</code>
          Example:
          <code>
 .some-class {transition: all 1s ease; border: 1px solid black; width: 50px; height: 50px; }
 .some-class:hover {background: grey}
          </code>
          <style media="screen">
            .some-class {
              transition: all 1s ease;
              border: 1px solid black;
              width: 50px;
              height: 50px;
              position: relative;
              left: 280px;
              bottom: 20px;
            }
            .some-class:hover {background: grey}
          </style>
          ===> (hover over this) <div class="some-class"></div>

          <code>Opacity</code>
          Example:
          <code>
            .background-img {
              background-image: http://www.aquariumdomain.com/images/fish_marine/shark_coralCatshark1.jpg;
              width: 200px;
              height: 200px;
              padding:50px;
            }
            .opaque-overlay {
              width: 100px;
              height: 100px;
              background-color: yellow;
              opacity: 0.5;
            }
          </code>
          <style media="screen">
          .background-img {
            background: url("http://www.aquariumdomain.com/images/fish_marine/shark_coralCatshark1.jpg");
            background-overflow: hide;
            width: 100px;
            height: 100px;
            padding:50px;
            position: relative;
            left: 200px;
            bottom: 20px;
          }
          .opaque-overlay {
            width: 100px;
            height: 100px;
            background-color: yellow;
            opacity: 0.5;
          }
          </style>
          ==> See here:
          <div class="background-img">
            <div class="opaque-overlay"></div>
          </div>
          <code>Inline-Block</code>
          This helps inline attributes gain block traits without automatically taking up
          a full line line blocks tend to. It can also be used for block elements to make
          them appear inline. Here's an example of a span element styled using
          inline-block:
          <code>
            .inline-block-span {
              display: inline-block;
              border: 1px solid black;
              padding: 2px;
              background-color: lightgreen;
            }
          </code>
          <style media="screen">
          .inline-block-span {
            display: inline-block;
            border: 1px solid black;
            padding: 2px;
            background-color: lightgreen;
          }
          </style>
            Some normal text - <span class="inline-block-span">I'm an inline block span</span> ... some more normal text

          <code>Box-Shadow, border-radius</code>
          <code>
.sun {
  border: 1px solid black;
  border-radius: 50px;
  box-shadow: 0px 0px 100px darkred;
  width: 100px;
  height: 100px;
  position: relative;
  left: 100px;
  background-color: yellow
}

          </code>
          <style media="screen">
          .sun {
            border: 1px solid black;
            border-radius: 50px;
            box-shadow: 0px 0px 100px darkred;
            width: 100px;
            height: 100px;
            position: relative;
            left: 100px;
            background-color: yellow
          }
          </style>
          ==> <div class="sun"></div>

    </pre>
  </section>

  <section class="databases" id="databases">
    <p><b>Databases</b></p><pre>
      Databases aren't strictly necessary for data storage. There's always writing and reading
      from file. In Ruby, there's also <code>PStore</code> (<a href="#pstore-url">standard library link</a>) -
      a really useful Standard Library module for storing data to file in a Hash format.
      As far as the standard kinds of databases for public-facing applications, though,
      I'm familiar with SQL and, to a lesser extent, "NoSQL" systems.
      SQL stands for "structured query language" - for databases like <a href="#postgres-url">Postgres</a>,\
      <a href="MySQL">MySQL</a>, and <a href="SQLite">SQLite</a>. There are useful GUI programs
      such as  <a href="#postgres-gui-urk">SOME-POSTGRES-GUI</a>, <a href="#sql-workbench-url">SOME-SQL-WORKBENCH</a>, and Ruby also has a
      good interface through <code>DB-RAW-EXECUTE</code>, <code>SomeModel.find_by_sql</code>,
      or <code>rails dbconsole</code>.

      Besides SQL, there's something called NoSQL which is a realm I haven't
      extensively explored. I have worked with Redis, though, in my work at Sobrr.life.
      As I understand it, Redis is quicker than SQL, but it is also in a sense more primitive, at
      least with the configuration I had. Perhaps "primitive" isn't the right word for it -
      for example, <a href="#">this blog post</a> on the topic describes how Redis' should
      ideally be used for "atomic operations", which is specifically what we used it for at
      Sobrr.life - caching of "score" counters for members and posts (data which could be
      recomputed but not conveniently). I have also started learning MongoDB in
      the context of Meteor.
    </pre>
  </section>
  <section class="deployment" id="deployment">
    <p><b>Deployment</b></p><pre>
      I got a lot of experience with deployment when working at Sobrr.life. Before I had
      mostly deployed with Heroku, which makes it almost effortless to deploy with a
      postgres-configured Rails application. I'd also deployed my <a href="#asteroids-url">Asteroids</a> and
      <a href="#snake-url">Snake</a> HTML5 Canvas games on Github pages. Still, though, it was a really valuable
      experience working on a deployed app serving a monthly userbase over 100,000.

      Specific areas I worked were often in the context of <a href="#aws-url">AWS</a>

      For example:

      <b>Elastic Beanstalk</b>

      <b>EC2</b>

      <b>Cloudwatch</b>

      <b>ElastiCache</b>

    </pre>
  </section>

  <section class="testing" id="testing">
    <p><b>Testing</b></p>
<pre>


  Testing is the process of sending sample data through methods to ensure
  that the application is working correctly. "Unit" tests focus on small areas of code
  in isolation, while "Integration" tests focus on the application's parts working in
  unison.

  For tests,I mainly have experience in Ruby, but also a bit in Javascript.
  In Ruby, here are a few of the tools that I have used:

  <b>RSpec</b>

  <b>Selenium</b>

  <b>Cucumber</b>

  For Javscript, I have basically just used <a href="#jasmine-url">Jasmime</a>, and not very much - just
  at App Academy, when as part of the curriculum we wrote & took automated tests in
  Javascript.
</pre>

  </section>

  <section class="linux" id="linux">
    <p><b>Linux</b></p><pre>
  <span>To fair, I'm probably a Linux expert as much as the average Mac developer is a
  mac expert, but it so happens that I've used Linux for a few years. It is free,
  and installation is possible on many machines, and, anyway, I prefer the FOSS
  "aesthetic" to mac's expensive "minimalism".</span>

  <span>Unix commands are Linux commnads, for the most part. There's also the
  <a href="#apt-url">APT</a> software repository specific to my favorited Linux "distribution",
  Ubuntu. I'm not a sysadmin and I prefer <a href="#nano-url">Nano</a> to <a href="#vim-url">Vim</a>,
  (make of that what you will) but I do enjoy learning about Linux commands and
  programs. </span>

  <span>Ruby is nicely suited to shell programming automation, as any commands
  within <code>``</code> backticks will be delegated to the system. It's especially
  useful in conjunction with string interpolation.</span>.

  <span>I'm currently using <a href="#awesome-url">Awesome Window Manager</a>,
  which is a "tiling" window manager. It's pretty cool.
  </span>
  <span>As of writing, I'm running Ubuntu 14.01 on a Chromebook using <a href="#crouton-url">Crouton</a>.
  </span>

</pre>
  </section>
  <section class="iot" id="iot">
    <p><b>Internet of Things</b></p> <br>
    <pre>
      The internet <i>is</i> an internet of things, but some physical integrations
      are more revolutionary than others. For example:

      <b>Phones</b>

      <b>Music</b>
          <i>Drumpants</i>
          <i>Minisynth1</i>
          <i>MInisynth2</i>
          <i>Mouth Mic</i>

      <b>Bicyles</b>
        Lights
        Turn Signals
        Brake Lights
        Obnoxious Noise

      <b>Google Glass</b>
        <i><b>synopsis</b>it's cool but leave the camera as an attachment.</i>

    </pre>
  </section>

  <section class="world" id="world">
    <p><b>The World at Large</b></p> <br>
    <pre>
      I maintain a Politics blog on <a href="#blogspot-politics-url">Blogspot</a>.
      I am interested in topics all over the place, but especially in war, class history,
      monetary symbolism, tech-enabled metaspatiality, physical politics, gender roles,
      and vehicular aggression.
    </pre>
  </section>
</section>

<section>
  <div class="experience" id="experience">
    <p><b>Experience</b></p> <br>
    <pre>
    I'm from San Francisco, and went to UC Santa Cruz for college.
    I was undeclared for a while with the intention of choosing
    a STEM major, then switched to Linguistics before finally
    switching to Politics. After finishing college, I started
    studying computer programming with an emphasis on web
    development.
    
    Prior to programming, I had a lot of professional experience
    in the non-profit / politics realm. I did canvassing to
    fundraise for nonprofits, gathered signatures for dozens
    of California ballot initialitives, polled voters for
    a mayoral campaign, and staffed a City Council member's office in
    Santa Cruz. I scoped ice cream and made sandwiches, too.
    
    When I returned to San Francisco after graduating, I was
    discovered that there were a lot of community resources
    for beginning to study web development. I was interested in
    the "boot camps", but I was also confident in my independent
    learning abilities and wanted to explore the field more
    independently at first. I followed free curriculums which
    introduced me to Ruby, HTML, CSS, Javascript, Git, Unix, etc.
    such as <a href="#odin-url">The Odin Project</a>.
    
    Eventually I started to feel like my questions were becoming
    more nuanced and I could benefit from more dialog with
    a teacher. I was still a bit ambivalent about the bootcamps
    because I wasn't sure the pressure of an 80+ hour work week
    was worth it. It had been nearly a year since I began studying
    full-time, though, and although I was eager to work, I felt
    as though I still needed some more educational experience
    before I dove into the job market.
    I joined <a href="#codeunion-url">CodeUnion</a>'s first
    class. It appealed to me for a few reasons. It was a 6 person
    group with 2 teachers, one of whom wrote much of the curriculum
    for DevBootcamp, a reputable bootcamp. It would teach <a href="https://sinatrarb.com">Sinatra</a>,
    which, unlike Rails, would be completely new to me. It was
    a great class and the positive experience gave me the confidence
    to apply to a some of the most reputable bootcamps.
    
    I got into App Academy, my top choice since it has a good
    reputation and a progressive tuition model (based on
    the post-graduation salary achieved). In my three months there, I
    found that my independent education experience was really
    valuable, but I learned tons and gained a way more "comprehensive
    "full-stack" skillset.
    
    My first developer job was at Sobrr.life, a small, seed-funded
    startup in San Francisco. The app itself was for the iOS and
    Android mobile platforms only, and I was on the back end team
    programming the Rails server which communicated data to the
    mobile apps. I also managed the database, deploys, built
    Javascript features for the promotional website, and was the
    main programmer for server-side app logic updates.
    
    Many tasks required collaboration between the mobile developers
    and the back end team. I configured REST endpoints, pagination
    cursors, JSON responses, language detection, and moderation
    rules. I set up delayed jobs (via the <a href="#Resque-url">Resque</a> Redis queueing
    library for sending automated chats and MPN push notifications at
    scheduled times. I added a Javascript-powered administration
    interface for the website in addition to infinite-scroll and
    a responsive grid for <a href="http://app.sobrr.life/presentation/around_feeds">the promotional site</a>.
    I did a lot more. Every day was different and the experience
    was invaluable. The company's development operations have since
    relocated overseas.
    
    I've recently relocated to Portland from San Francisco and I'm
    currently seeking new work here.
    </pre>
    </div>
</section>

<section>
  <div class="links" id="links">
    <p><b>Links</b></p> <br>
    &bull; <a href="http://github.com/maxpleaner">Github</a> <br> <br>
    &bull; <a href="http://linkedin.com/in/maxpleaner">LinkedIn</a> <br><br>
    <!--&bull; <a href="#blog-1-url">Blog1</a> <br><br>-->
    <!--&bull; <a href="#blog-2-urk">Blog2</a>-->
  </div>
</section>
