<!--  hidden by JS -->
<!--  .js-test-hidden -->
<div class="js-test-hidden">
Loading Javascript
</div>

<div class="header">
  <section class="intro">
    <b> Max Pleaner </b> <br><br>
    <i> <small>Web Developer / Software Engineer </small></i>
  </section>
  <br>
  <hr>
  <br>
  <section class="primary-links">
    <a class="clickable" data-target="skills" href="#skills">Skills</a>
    <a class="clickable" data-target="experience" href="#experience">Experience</a>
    <a class="clickable" data-target="links" href="#links">Links</a>
  </section>
   <br>
</div>

<!--  .focus-area-1 -->
<!--  .focus-area-2 -->
<section class="focus-area-1"></section><br>
<section class="focus-area-2"></section>

<!--  .skills -->
<!--  .clickable -->
<!--  data-target -->
<section class="skills" id="skills">
  <p><b>Skills</b></p> <br>
  <a class="clickable" data-target="ruby" href="#skills/ruby">Ruby</a>
  <a class="clickable" data-target="javascript" href="#skills/javascript">Javascript</a>
  <a class="clickable" data-target="databases" href="#skills/databases">Databases</a>
  <a class="clickable" data-target="deployment" href="#skills/deployment">Deployment</a>
  <a class="clickable" data-target="testing" href="#skills/testing">Testing</a>
  <a class="clickable" data-target="linux" href="#skills/linux">Linux</a>
  <a class="clickable" data-target="world" href="#skills/world">Politics</a>
</section>

<!--  .skill-details -->
<section class="skill-details">
  <section class="ruby" id="ruby">
    <p><b>Ruby</b></p>
    <p>
      <pre>

<b><a href="http://rubyonrails.org/">Rails</a></b>

I've been working with Rails since not long after I began programming (in June 2013). 

I've come to appreciate Rails' "convention over configuration" approach.

<a href="http://www.sinatrarb.com/">Sinatra</a>

Sinatra shares a lot in common with Rails but is more minimalist. Apps are built more from-the-ground-up. Sinatra's routing pattern, <code>get ("/"){ puts "hello world" }</code>, is found in lots of Ruby's web 'microframeworks'.

<a href="http://www.rubygems.org/">Gems</a>

Gems are Ruby's plugin system, managed with <a href="https://rvm.io/">RVM</a>  or <a href="https://github.com/sstephenson/rbenv">rbenv</a>), <a href="https:/ rubygems.org/">RubyGems</a>, <a href="http://bundler.io/">Bundler</a>, etc.Interesting gems are constantly coming out.

      </pre>
    </p>
  </section>

  <section class="javascript" id="javascript">
    <p><b>Javascript</b></p><pre>
I've been learning & working with Javascript since soon after I began programming.

Javascript provides a ubiquitous interface for the browser DOM and is also a server language.  

<b><a href="http://jquery.com">jQuery</a></b> is a very useful abstraction for DOM methods. One could write Javascript equivalents for jQuery methods (<a href="http://youmightnotneedjquery.com">youmightnotneedjquery.com</a>), but it's used by <a href="http://blog.jquery.com/2014/01/13/the-state-of-jquery-2014">60% of the top 100,000 websites</a>.

<b>
<a href="http://coffeescript.org/">Coffeescript</a> </b>

Coffeescript compiles to Javascript. Coffeescript's syntax is meant to be less verbose than Javascript's, and looks more similar to Python or Ruby. 
<b>

<a href="http://backbonejs.org/">Backbone</a></b>

Backbone is a client-side Javascript MV(C).

At App Academy and beyond, I've gained a lot of experience building Backbone apps on top of Rails. A major main benefit of single-page-apps is the ability for clients to interact with servers without the need for full page reloads, like websites traditionally have. AJAX (or WebSockets, etc) is used to send HTTP requests in the background. This is more efficient, more user-friendly, and enables web apps to function more like native apps.
</b>
<b>

<a href="https://www.npmjs.com/">NPM</a>
</b>

NPM, 'Node Package Manager', is akin Ruby Gems in many ways. 

NPM integrates with Node's <code>require</code> system to make including packages very quick and easy. <code>npm install jQuery</code> allows one to simply write <code>$ = require(jQuery)</code>.

As with Ruby gems, there are many useful and interesting Node packages coming out. <a href="http://yeoman.io/">Yo</a> (Yeoman) provides generators for lots of Node projects. They often include build and deploy systems configured with the application. There are generators for most JS frameworks and for NPM package skeletons, jQuery plugins, Chrome extensions, some Ruby frameworks like Sinatra, etc.
      </pre>

  </section>

  <section class="databases" id="databases">
    <p><b>Databases</b></p><pre>

Ive used SQL with databases like <a href="http://www.postgresql.org/">Postgres</a>, <a href="https://www.mysql.com/">MySQL</a>, and <a href="https://www.sqlite.org/">SQLite</a> in addition to non-SQL storage systems like JSON, YAML,
PStore, Redis, and MongoDB. 

Ruby's <a href="https://github.com/rails/arel">Arel</a>-based <a href="https://github.com/rails/rails/tree/master/activerecord">ActiveRecord</a> is a Ruby library for abstracting vendor-specific SQL syntax. It's queries are far more human-readable queries than SQL's, but are still highly optimizable.

    </pre>
  </section>
  <section class="deployment" id="deployment">
    <p><b>Deployment</b></p><pre>
Before working at Sobrr.life, I had mostly deployed with Heroku for personal projects. I'd also deployed on Github pages - <a href="https://maxpleaner.github.io/asteroids">Asteroids</a> and <a href="https://maxpleaner.github.io/snake">Snake</a> HTML5 Canvas games and a (inactive) jekyll blog.

At Sobrr.life, we used <a href="http://aws.amazon.com/">AWS</a>. 

<a href="http://aws.amazon.com/ec2/">EC2</a> - virtual 'instances' the app is installed on. These can be SSHd into.
<a href="http://aws.amazon.com/s3/">S3</a> - Asset hosting, e.g. images
<a href="http://aws.amazon.com/elasticbeanstalk/">Elastic Beanstalk</a> - Autoscaling and groupings of EC2 instances (i.e. Sandbox, Staging, and Production environments).
<a href="http://aws.amazon.com/cloudwatch/">Cloudwatch</a> - storing & visualizing metrics
<a href="http://aws.amazon.com/elasticache/">ElastiCache</a> - Redis / Memcached for caching and queueing.
<a href="http://aws.amazon.com/rds/">RDS</a> - Relational Database Service, i.e. MySQL or Postgres. We used a hierarchichal <a>replication</a> system at Sobrr.life


    </pre>
  </section>

  <section class="testing" id="testing">
    <p><b>Testing</b></p>
<pre>For tests, I mainly have experience in Ruby, but also in Javascript. In Ruby, here are a few of the tools that I have used:

<a href="http://rspec.info/">RSpec</a>,"behavior-driven-development"
<a href="https://github.com/jnicklas/capybara">Capybara</a> ("integration tests") - browser automation.
<a href="https://cucumber.io/">Cucumber</a> ("acceptance tests") - added readability, natural language syntax

For Javascript, I've used <a href="http://jasmine.github.io/">Jasmime</a>.

</pre>

  </section>

  <section class="linux" id="linux">
    <p><b>Linux</b></p><pre>
I've used Linux for a few years, since right around when I began programming. 

Until recently, I was running Ubuntu 14.01 on a Chromebook using <a href="https://github.com/dnschneid/crouton">Crouton</a>.

I've sinced bought a windows HP laptop and I'm running <a href="http://http://linuxmint.com/">Linux Mint</a> on it. 

I'm gradually learning more about Unix / Linux administration. 

</pre>
  </section>

  <section class="world" id="world">
    <p><b>Politics</b></p>
    <pre>
I have a B.A. in Politics from UC Santa Cruz, and it's still a major interest of mine.

A lot of my pre-programming experience is in Politics. I canvassed donations for non profits like <a href="http://savethechildren.org">Save the Children</a> and <a href="http://eqca.org">Equality California</a>. I petitioning for a wide range of initiatives which needed signatures to get on the ballot. I also performed phone polling for Leland Yee's campaign for San Francisco Mayor in 2011. When studying Politics at UCSC, I had an internship with a City Council Member.
  </pre>
  </section>
</section>

<section>
  <div class="experience" id="experience">
    <p><b>Experience</b></p> <br>
    <pre>
I'm from San Francisco.  Prior to programming, I had a lot of professional  experience in the non-profit / politics area.  

I canvassed to fundraise for nonprofits, gathered signatures for dozens of California ballot initiatives, polled voters for a mayoral campaign, and  staffed a City Council member's office in Santa Cruz.

I got a Politics B.A. from UC Santa Cruz for college. After finishing college, I started studying web development. I followed free curriculums which introduced me to Ruby, HTML, CSS,  Javascript, Git, Unix, etc. such as <a href="http://www.theodinproject.com/"> The Odin Project</a>.

I joined <a href="http://codeunion.io/">CodeUnion</a>'s first class. I learned web dev fundamentals using <a href="https://sinatrarb.com">Sinatra</a>.

I then attended <a href="http://appacademy.io/#p-curriculum">App Academy</a>. In my three months there, I gained a more comprehensive 'full-stack' skillset in Javascript (+ Node, jQuery, Backbone, etc.), Ruby, SQL, etc. I then began my first developer job at Sobrr.life, a social media startup in  San Francisco.
  
I was on the Rails back end team, working on the API which served the iOS and Android apps. Since it was a small team, I wore many hats, including DBA, Devops, and Javascript developer. 

Examples:

&bull; Javascript features for the promotional website - an administration interface and infinite-scroll with a responsive pinterest-style grid (see <a href="http://app.sobrr.life/presentation/around_feeds">the site</a>).
&bull; delayed jobs (via the <a href="https://github.com/resque/resque">Resque</a> Redis queueing library) for scheduling chats and MPN push notifications.
&bull; caching using <a href="http://redis.io">Redis</a> built on ActiveRecord, including rake tasks for data migration.

    </pre>
    </div>
</section>

<section>
  <div class="links" id="links">
    <p><b>Links</b></p> <br>
    <pre><a href="http://github.com/maxpleaner">Github</a>
    
<a href="http://linkedin.com/in/maxpleaner">LinkedIn</a>

Email: <a href="mailto:maxpleaner@gmail.com">maxpleaner@gmail.com</a>

Portfolio pieces:

<a href="http://app.sobrr.life/presentation/around_feeds">Sobrr.Life promotional page</a>. I implemented the responsive pinterest-style vertical columns layout using <a href="http://masonry.desandro.com/">Masonry</a> and added infinite scroll.

<a href="http://maxp-logbot.herokuapp.com/">Logbot</a>, an IRC chat logging bot with a Sinatra web interface.

<a href="http://maxp-trello.herokuapp.com/#boards/1">Trello</a> clone, made with Backbone.js and Rails.

<a href="http://maxp-redirector.herokuapp.com/">Redirector</a>, a url shortener and chrome extension.

<a href="http://maxpleaner.github.io/snake/">Snake</a>, built with Javascript (play in browser).

<a href="http://maxpleaner.github.io/asteroids/">Asteroids</a>, build with HTML5 Canvas (play in browser).

<a href="https://github.com/maxpleaner/chess">CLI chess</a> (in Ruby).

<a href="https://github.com/maxpleaner/maxp-site">This site</a> (Github link) - Single page site built with jQuery + Rails

<a href=""></a>
    <!--  <a href="#blog-1-url">Blog1</a> <br><br>-->
    <!--  <a href="#blog-2-urk">Blog2</a>-->
    </pre>
  </div>
</section>
