<!--  hidden by JS -->
<!--  .js-test-hidden -->
<div class="js-test-hidden">
Loading Javascript
</div>

<div class="header">
  <section class="intro">
    <b> Max Pleaner </b> <br><br>
    <i> <small>Web Developer / Software Engineer </small></i>
  </section>
  <br>
  <hr>
  <br>
  <section class="primary-links">
    <a class="clickable" data-target="skills" href="#skills">Skills</a>
    <a class="clickable" data-target="experience" href="#experience">Experience</a>
    <a class="clickable" data-target="links" href="#links">Links</a>
  </section>
   <br>
</div>

<!--  .focus-area-1 -->
<!--  .focus-area-2 -->
<section class="focus-area-1"></section><br>
<section class="focus-area-2"></section>

<!--  .skills -->
<!--  .clickable -->
<!--  data-target -->
<section class="skills" id="skills">
  <p><b>Skills</b></p> <br>
  <a class="clickable" data-target="ruby" href="#skills/ruby">Ruby</a>
  <a class="clickable" data-target="javascript" href="#skills/javascript">Javascript</a>
  <a class="clickable" data-target="databases" href="#skills/databases">Databases</a>
  <a class="clickable" data-target="deployment" href="#skills/deployment">Deployment</a>
  <a class="clickable" data-target="testing" href="#skills/testing">Testing</a>
  <a class="clickable" data-target="linux" href="#skills/linux">Linux</a>
  <a class="clickable" data-target="world" href="#skills/world">The World
   at Large</a>
</section>

<!--  .skill-details -->
<section class="skill-details">
  <section class="ruby" id="ruby">
    <p><b>Ruby</b></p>
    <p>
      <pre>

<b><a href="http://rubyonrails.org/">Rails</a></b>

Rails is the web framework I'm quickest and most fluent in. I don't think Rails is the end-all for web development. With more fluency, I'm sure I could write a complex single-page app faster with a Node framework. For mostly everything besides asynchronous server calls and client-side page navigation, though, I'm quickest with Rails.

<b>Code Organization</b> - I've come to appreciate the 'convention over configuration' approach,  which enhances components' portability among projects and helped me get productive on a large codebase like Sobrr.life quickly.

<b>Generators</b> - <code> rails new </code> is a generator for a new project. For some projects (like this site, which is mainly HTML, CSS and JS), this is nearly all the code the server needs in development mode. There are also generators for models, controllers, database migrations, <a href="http://en.wikipedia.org/wiki/Rake_%28software%29">rake tasks</a>, and, my favorite, scaffolds, which produce a working <a href="http://en.wikipedia.org/wiki/Create,_read,_update_and_delete">CRUD</a> app with front-end. Generators excite me not just because of laziness but also because of their potential to facilitate metaprogramming. There's a project called <a href="http://prelang.com/">Prelang</a> which lets you describe your app's specs in a web interface and generates a rails project for you. <a href="http://www.meteorkitchen.com/">Meteor Kitchen</a> is a similar tool for Javascript. I'm also eager to look more into <a href="http://emberjs.com/">Ember.js</a>, which has generators which look similar to Rails'. 

<a href="http://www.sinatrarb.com/">Sinatra</a>

Sinatra shares a lot in common with Rails but is more minimalist. Apps are built more from-the-ground-up. Sinatra's routing pattern, <code>get ("/"){ puts "hello world" }</code>, is found in lots of Ruby's web 'microframeworks'.

<a href="http://www.rubygems.org/">Gems</a>

Gems are Ruby's plugin system, managed with <a href="https://rvm.io/">RVM</a> (or <a href="https://github.com/sstephenson/rbenv">rbenv</a>), <a href="https://rubygems.org/">RubyGems</a>, <a href="http://bundler.io/">Bundler</a>, etc. Interesting gems are constantly coming out.

Here are a few gems I like:

<a href="https://github.com/deivid-rodriguez/byebug">Byebug</a> - This makes it possible to place breakpoints in code and step through, inspecting values and running code in a REPL. It is similar to the "<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/debugger">debugger</a>" breakpoit tool for Javascript in major browsers. 
</span><span>
<a href="http://opalrb.org/">Opal</a> - Opal compiles Ruby to Javascript and can even compile to Javascript libraries like jQuery. <a href="http://voltframework.com/">Volt</a> is a framework built with Opal that features 2-way-data binding. I haven't used much Opal, but I'm eager to. 
</span><span>
<a href="https://github.com/rest-client/rest-client">Rest Client</a> - is an HTTP client for server-side requests
</span> <span>
<a href="https://github.com/nokogiri/nokogiri">Nokigiri</a> for DOM parsing and 'web scraping'. <code>Nokigiri.parse(html).css</code> allows for selecting objects from the DOM like <code>$('.some-css-class')</code> does in jQuery.
</span>
</span>

      </pre>
    </p>
  </section>

  <section class="javascript" id="javascript">
    <p><b>Javascript</b></p><pre>
I've been learning & working with Javascript since soon after I began programming.

Javascript provides a ubiquitous interface with the browser DOM. 

<b><a href="http://jquery.com">jQuery</a></b> is a very useful abstraction for DOM methods. One could write Javascript equivalents for jQuery methods (<a href="http://youmightnotneedjquery.com">youmightnotneedjquery.com</a>), but it's used by <a href="http://blog.jquery.com/2014/01/13/the-state-of-jquery-2014">60% of the top 100,000 websites</a>.

Here are a few examples of jQuery functions which I find useful:

<code>$.ajax</code>, <code>$.get</code>, <code>$.post</code>, etc. can be used for asynchronous communication with the server.

<code>$.('.css-selector')</code> can be used to select DOM elements using class, ID or attribute. 

<code>$(".selector").on("event", function(event) { ... event code ... })</code> provides event handlers for <code>click</code>, <code>hover</code>, <code>submit</code>, window scrolling, etc.

<code>hide()</code>, <code>show()</code>, <code>fadeOut()</code>, <code>clone()</code>, <code>remove()</code>, <code>empty()</code>, etc. are also useful.

<b>
<a href="http://coffeescript.org/">Coffeescript</a> </b>

Coffeescript compiles to Javascript. 
Coffeescript's syntax is meant to be less verbose than Javascript's, and looks more similar to Python or Ruby. 
- many <code>()</code> parentheses are optional, and so are <code>{}</code> curly brackets.
- Indentation is used to delimit blocks / scope (as in Python, YAML, etc).
- There is a <code>functionVariable = (arg) -> console.log(arg) </code> shorthand for functions that is similar to Ruby's <code>function_variable = ->(arg) { puts arg }</code> lambda shorthand.
</b>
<b>
<a href="http://backbonejs.org/">Backbone</a></b>

Backbone is a client-side Javascript MV(C).

At App Academy, I gained a lot of practice building Backbone apps on top of Rails. The <a href="https://github.com/meleyal/backbone-on-rails">backbone-on-rails</a> Ruby gem provides a <code>rails generate backbone:install</code> command which sets up a basic directory structure and some boilerplate code for consuming Rails' JSON API as a backend for Backbone.
- Backbone has it's own router, with routes navigatable via the <code>#</code> url fragment.
- HTML templates can use <a href="http://www.embeddedjs.com/">EJS</a> (embedded Javascript), which provides an <a href="http://en.wikipedia.org/wiki/ERuby">ERB</a>-like syntax for programmatic control over HTML.
- Events are registered in a concise DSL, <code>events: {"click button.upvote": sendUpvote }</code>.
- Subviews can add a lot of modular control over front-end components. Libraries like <a href="http://marionettejs.com/">Marionette</a> are built for subviews. When making Backbone apps, I've instead used a hand-rolled system written as part of the App Academy curriculum.

A major main benefit of single-page-apps is the ability for clients to interact with servers without the need for  full page reloads, like websites traditionally have. AJAX (or WebSockets, etc) is used to send HTTP requests in the background. This is more efficient, more user-friendly, and enables web apps to function more like native apps.
</b>
<b>
<a href="https://www.meteor.com/">Meteor</a>
</b>
I've began learning and building with Meteor since it offers an integrated server-client system which is intended for single-page-app development.

This certainly isn't unique to Meteor. The <a href="http://mean.io/#!/">MEAN</a> stack is more widely used and integrates an <a href="https://angularjs.org/">Angular</a> front-end with <a href="http://expressjs.com/">Express</a> / <a href="https://www.mongodb.org/">MongoDB</a> backend running on Node. Meteor entices me becuase of it's comprehensive scope and emphasis on reducing boilerplate code for client-server communication and DOM updates. Meteor's team made it's own <a href="https://www.meteor.com/ddp">DDP</a> data communiction protocol for two-way data binding.

The world of single-page-apps is growing rapidly and is accompanied by the emergence of new frameworks. Angular's development is funded by Google and React by Facebook. Meteor offers freemium hosting and a Meteor-only package manager built on top of NPM called <a href="https://atmospherejs.com">Meteorite</a>. 

Meteor's packages are notably easy to set up. To add authentication via password or OAuth provider, simply adding a meteor package like <code>meteor add accounts-password</code> or <code>meteor add accounts-github</code> will set up the backend and one can add a front-end with only <code>meteor add accounts-ui</code> and <code>{{>loginButtons }}</code>.

</b>
<b>
<a href="https://www.npmjs.com/">NPM</a>
</b>

NPM, 'Node Package Manager', is akin Ruby Gems in many ways. 

NPM integrates with Node's <code>require</code> system to make including packages very quick and easy. <code>npm install jQuery</code> allows one to simply write <code>$ = require(jQuery)</code>.

As with Ruby gems, there are many useful and interesting Node packages coming out:

<a href="http://yeoman.io/">Yo</a> provides generators for lots of Node projects. They often include build and deploy systems configured with the application. There are generators for most JS frameworks and for NPM package skeletons, jQuery plugins, Chrome extensions, some Ruby frameworks like Sinatra, etc.

<a href="http://gruntjs.com/">Grunt</a> is a "build system" / automated task runner. Here are some tasks Grunt might be used for:
- Running a test suite and automated code review
- Running preprocessors (Coffeescript to Javascript,SASS to CSS, Markdown to HTML, etc)
- Minifying and compressing assets (CSS, JS, images)
- Deploying to sandbox / production servers
- Backing up a database


      </pre>

  </section>

  <section class="databases" id="databases">
    <p><b>Databases</b></p><pre>

Ive used SQL with databases like <a href="http://www.postgresql.org/">Postgres</a>, <a href="https://www.mysql.com/">MySQL</a>, and <a href="https://www.sqlite.org/">SQLite</a>.

At Sobrr.life, I administered tables with hundreds of thousands of rows. I optimized queries, migrated data, and used caching / queueing systems.

NoSQL systems I've worked with include <a href="http://www.infoworld.com/article/2608293/nosql/how-json-sparked-nosql----and-will-return-to-the-rdbms-fold.html">JSON</a>, <a href="http://yaml.org/">YAML</a>, <a href="http://redis.io/">Redis</a>, and some <a href="https://www.mongodb.org/">MongoDB</a>. I've also used <a href="https://github.com/resque/resque">Resque</a>, an application process queueing system built on Redis.

Ruby's <a href="https://github.com/rails/arel">Arel</a>-based <a href="https://github.com/rails/rails/tree/master/activerecord">ActiveRecord</a> is a Ruby library for abstracting vendor-specific SQL syntax. It's queries are far more human-readable queries than SQL's, but are still highly optimizable.
A simple storage system is Ruby's <a href="http://ruby-doc.org/stdlib-2.1.2/libdoc/pstore/rdoc/PStore.html">PStore</a>, which is included in the Standard Library and provides an interface for saving the state of a Hash to file.

    </pre>
  </section>
  <section class="deployment" id="deployment">
    <p><b>Deployment</b></p><pre>
Before working at Sobrr.life, I had mostly deployed with Heroku for personal projects. I'd also deployed on Github pages - <a href="https://maxpleaner.github.io/asteroids">Asteroids</a> and <a href="https://maxpleaner.github.io/snake">Snake</a> HTML5 Canvas games and a (inactive) jekyll blog.

At Sobrr.life, we used <a href="http://aws.amazon.com/">AWS</a> to serve 100,000 monthly users and thousands of daily users.

Some AWS services we used:

<a href="http://aws.amazon.com/ec2/">EC2</a> - virtual 'instances' the app is installed on. These can be SSHd into. Some resource-intensive operations such as data migrations required that these machines' CPU consumption be optimized.

<a href="http://aws.amazon.com/s3/">S3</a> - Asset hosting, e.g. images for user posts. A major feature of the Sobrr app is expiring photo posts.

<a href="http://aws.amazon.com/elasticbeanstalk/">Elastic Beanstalk</a> - Autoscaling and groupings of EC2 instances (for Sandbox, Staging, and Production environments).

<a href="http://aws.amazon.com/cloudwatch/">Cloudwatch</a> - For storing & visualizing metrics

<a href="http://aws.amazon.com/elasticache/">ElastiCache</a> - Redis for caching and queueing.

<a href="http://aws.amazon.com/rds/">RDS</a> - Relational Database Service. We used MySQL with a hierarchichal <a>replication</a> system (also known by the term "master-slave", still common despite being voted the most politically incorrect word <a href="http://www.seattlepi.com/national/article/Master-slave-named-mos -politically-incorrect-1161133.php">in 2004</a> by the Global Language Monitor).


    </pre>
  </section>

  <section class="testing" id="testing">
    <p><b>Testing</b></p>
<pre>For tests, I mainly have experience in Ruby, but also a bit in Javascript. In Ruby, here are a few of the tools that I have used:

<a href="http://rspec.info/">RSpec</a>, a behavior-driven-development framework.

<a href="https://github.com/jnicklas/capybara">Capybara</a> is used for integration tests and browser automation.

<a href="https://cucumber.io/">Cucumber</a> is used for acceptance tests and for added readability.

In Javascript, I learned <a href="http://jasmine.github.io/">Jasmime</a> at App Academy.

</pre>

  </section>

  <section class="linux" id="linux">
    <p><b>Linux</b></p><pre>
I've used Linux for a few years, since right around when I began programming. It is free, installation is possible on many machines and there's lots of great software for programming and non-programming alike.

Until recently, I was running Ubuntu 14.01 on a Chromebook using <a href="https://github.com/dnschneid/crouton">Crouton</a>. ChromeOS is built with Linux and has built-in virtualization capability for other Linux systems. it's possible to the Linux CLI from a browser tab in ChromeOS and access port processes (e.g. local HTTP servers) from ChromeOS. I've also made use of virtual machines like <a href="http://nitrous.io">Nitrous.io</a> (which is shutting down it's free tier), AWS and <a href="http://c9.io">Cloud 9</a>.

I've sinced bought a windows HP laptop and I'm running <a href="http://http://linuxmint.com/">Linux Mint</a> on it. 

I'm gradually learning more about Unix / Linux administration. 

</pre>
  </section>

  <section class="world" id="world">
    <p><b>The World at Large</b></p>
    <pre>
I have a B.A. in Politics from UC Santa Cruz, and it's still a major interest of mine. I'm really interested in building apps and services which offer ubiquitous benefits for society, especially with non-profit models. 

A lot of my pre-programming experience is in Politics. I canvassed donations for non profits like <a href="http://savethechildren.org">Save the Children</a> and <a href="http://eqca.org">Equality California</a>, and while I enjoyed the public outreach, I tired of fundraising. I began petitioning for a wide range of ballot initiatives which needed signatures to get on the ballot (pay-per-signature jobs). I also performed phone polling for Leland Yee's campaign for San Francisco Mayor in 2011. The debts of the campaign apparently propelled the State Senator into some corruption which he was eventually indicted for. When studying Politics at UCSC, I had an internship with a City Council Member that gave me valuable experience in community organizing and policy analysis.

While I began programming after finishing college and haven't had much continued my Politics work, I am looking forward to opportunites to combine my skillsets. 
  </pre>
  </section>
</section>

<section>
  <div class="experience" id="experience">
    <p><b>Experience</b></p> <br>
    <pre>
- I'm from San Francisco.

- Prior to programming, I had a lot of professional experience in the non-profit / politics area.

- I did canvassing to fundraise for nonprofits, gathered signatures for dozens of California ballot initiatives, polled voters for a mayoral campaign, and staffed a City Council member's office in Santa Cruz.

- I got a Politics B.A. from UC Santa Cruz for college.

- After finishing college, I started studying web development.

- I followed free curriculums which introduced me to Ruby, HTML, CSS, Javascript, Git, Unix, etc. such as <a href="http://www.theodinproject.com/">The Odin Project</a>.

- Eventually I began to feel like my questions were becoming more nuanced and I could benefit from more extensive dialog with a teacher.

- I joined <a href="http://codeunion.io/">CodeUnion</a>'s first class.

- I learned <a href="https://sinatrarb.com">Sinatra</a>, which, unlike Rails, was totally new to me.

- Soon after, I attended <a href="http://appacademy.io/#p-curriculum">App Academy</a>. In my three months there, I gained a more comprehensive 'full-stack' skillset.

- I then began my first developer job at Sobrr.life, a social media startup in San Francisco.

- I was the main programmer for logic updates on the Rails back end team, configuring data sent to to iOS and Android apps (with thousands of daily active users).

- The development cycle was rapid, and often multiple features would be deployed each day. The features I worked on include:

&bull; REST endpoints, pagination cursors, JSON responses, language detection, and moderation rules.

&bull; managed databases and deploys

&bull; Javascript features for the promotional website - an administration interface and infinite-scroll with a responsive pinterest-style grid (see <a href="http://app.sobrr.life/presentation/around_feeds">the site</a>).

&bull; delayed jobs (via the <a href="https://github.com/resque/resque">Resque</a> Redis queueing library) for scheduling chats and MPN push notifications.

&bull; caching using <a href="http://redis.io">Redis</a> built on ActiveRecord, including rake tasks for data migration.

- The company's development operations have since relocated overseas.

- I'm currently looking for contract or full-time work. See the <a href="http://maxp-homepage.heroku.com/#links">Links</a> page to contact me.

    </pre>
    </div>
</section>

<section>
  <div class="links" id="links">
    <p><b>Links</b></p> <br>
    <pre><a href="http://github.com/maxpleaner">Github</a>
    
<a href="http://linkedin.com/in/maxpleaner">LinkedIn</a>

Email: <a href="mailto:maxpleaner@gmail.com">maxpleaner@gmail.com</a>

Portfolio pieces:

<a href="http://app.sobrr.life/presentation/around_feeds">Sobrr.Life promotional page</a>. I implemented the responsive pinterest-style vertical columns layout using <a href="http://masonry.desandro.com/">Masonry</a> and integrated it with an infinite scroll system written from scratch.

<a href="http://maxp-logbot.herokuapp.com/">Logbot</a>, an IRC chat logging bot with a web interface.

<a href="http://maxp-trello.herokuapp.com/#boards/1">Trello</a> clone, made with Backbone.js and Rails.

<a href="http://maxp-redirector.herokuapp.com/">Redirector</a>, a url shortener and chrome extension.

<a href="http://maxpleaner.github.io/snake/">Snake</a>, built with Javascript (play in browser).

<a href="http://maxpleaner.github.io/asteroids/">Asteroids</a>, build with HTML5 Canvas (play in browser).

<a href="https://github.com/maxpleaner/chess">CLI chess</a> (in Ruby).

<a href="https://github.com/maxpleaner/maxp-site">This site</a> (Github link) - Single page site built with jQuery + Rails

<a href=""></a>


    <!--  <a href="#blog-1-url">Blog1</a> <br><br>-->
    <!--  <a href="#blog-2-urk">Blog2</a>-->
    </pre>
  </div>
</section>
